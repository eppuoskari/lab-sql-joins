USE sakila;

# Write SQL queries to perform the following tasks using the Sakila database:
-- 1. List the number of films per category.
SELECT c.name AS category,
	COUNT(*) AS nro_of_films
FROM category AS c
LEFT JOIN film_category AS fc
	ON c.category_id = fc.category_id
LEFT JOIN film AS f
	ON f.film_id = fc.film_id
GROUP BY c.name
ORDER BY nro_of_films DESC;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id AS store_id,
	ci.city,
    co.country
FROM store AS s
LEFT JOIN address AS a
	ON s.address_id = a.address_id
LEFT JOIN city AS ci
	ON a.city_id = ci.city_id
LEFT JOIN country AS co
	ON ci.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT sr.store_id,
    SUM(p.amount) AS revenue
FROM store AS sr
LEFT JOIN staff AS sf
	ON sr.store_id = sf.store_id
LEFT JOIN payment AS p
	ON sf.staff_id = p.staff_id
GROUP BY store_id;

-- 4. Determine the average running time of films for each category.
SELECT c.name AS category,
	ROUND(AVG(length), 2) AS avg_length
FROM category AS c
LEFT JOIN film_category AS fc
	ON c.category_id = fc.category_id
LEFT JOIN film AS f
	ON f.film_id = fc.film_id
GROUP BY c.name
ORDER BY avg_length DESC;

# Bonus:
-- 5. Identify the film categories with the longest average running time.
SELECT c.name AS category,
	ROUND(AVG(length), 2) AS avg_length
FROM category AS c
LEFT JOIN film_category AS fc
	ON c.category_id = fc.category_id
LEFT JOIN film AS f
	ON f.film_id = fc.film_id
GROUP BY c.name
ORDER BY avg_length DESC;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT f.title,
	COUNT(r.rental_id) AS times_rented
FROM film AS f
LEFT JOIN inventory AS i
	ON f.film_id = i.film_id
LEFT JOIN rental AS r
	ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY times_rented DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, 
	s.store_id,
    r.rental_date,
    r.return_date
FROM film AS f
LEFT JOIN inventory AS i
	ON f.film_id = i.film_id
LEFT JOIN store AS s
	ON i.store_id = s.store_id
LEFT JOIN rental AS r
	ON i.inventory_id = r.inventory_id
WHERE f.title = "Academy Dinosaur";
    
-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
--    Include a column indicating whether each title is 'Available' or 'NOT available.' 
--    Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."